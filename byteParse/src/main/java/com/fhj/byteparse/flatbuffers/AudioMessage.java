// automatically generated by the FlatBuffers compiler, do not modify

package com.fhj.byteparse.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class AudioMessage extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static AudioMessage getRootAsAudioMessage(ByteBuffer _bb) { return getRootAsAudioMessage(_bb, new AudioMessage()); }
  public static AudioMessage getRootAsAudioMessage(ByteBuffer _bb, AudioMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AudioMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long audioDuration() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long audioBitrate() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long audioSampleRate() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long audioChannels() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long audioSize() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public byte audioStream(int j) { int o = __offset(14); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int audioStreamLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector audioStreamVector() { return audioStreamVector(new ByteVector()); }
  public ByteVector audioStreamVector(ByteVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer audioStreamAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer audioStreamInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }

  public static int createAudioMessage(FlatBufferBuilder builder,
      long audioDuration,
      long audioBitrate,
      long audioSampleRate,
      long audioChannels,
      long audioSize,
      int audioStreamOffset) {
    builder.startTable(6);
    AudioMessage.addAudioStream(builder, audioStreamOffset);
    AudioMessage.addAudioSize(builder, audioSize);
    AudioMessage.addAudioChannels(builder, audioChannels);
    AudioMessage.addAudioSampleRate(builder, audioSampleRate);
    AudioMessage.addAudioBitrate(builder, audioBitrate);
    AudioMessage.addAudioDuration(builder, audioDuration);
    return AudioMessage.endAudioMessage(builder);
  }

  public static void startAudioMessage(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addAudioDuration(FlatBufferBuilder builder, long audioDuration) { builder.addInt(0, (int) audioDuration, (int) 0L); }
  public static void addAudioBitrate(FlatBufferBuilder builder, long audioBitrate) { builder.addInt(1, (int) audioBitrate, (int) 0L); }
  public static void addAudioSampleRate(FlatBufferBuilder builder, long audioSampleRate) { builder.addInt(2, (int) audioSampleRate, (int) 0L); }
  public static void addAudioChannels(FlatBufferBuilder builder, long audioChannels) { builder.addInt(3, (int) audioChannels, (int) 0L); }
  public static void addAudioSize(FlatBufferBuilder builder, long audioSize) { builder.addInt(4, (int) audioSize, (int) 0L); }
  public static void addAudioStream(FlatBufferBuilder builder, int audioStreamOffset) { builder.addOffset(5, audioStreamOffset, 0); }
  public static int createAudioStreamVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createAudioStreamVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startAudioStreamVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endAudioMessage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AudioMessage get(int j) { return get(new AudioMessage(), j); }
    public AudioMessage get(AudioMessage obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

