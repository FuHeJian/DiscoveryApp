// automatically generated by the FlatBuffers compiler, do not modify

package com.fhj.byteparse.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ImageMessage extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static ImageMessage getRootAsImageMessage(ByteBuffer _bb) { return getRootAsImageMessage(_bb, new ImageMessage()); }
  public static ImageMessage getRootAsImageMessage(ByteBuffer _bb, ImageMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ImageMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String imageName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer imageNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer imageNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long imageSize() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long imageWidth() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long imageHeight() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public byte imageStream(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int imageStreamLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector imageStreamVector() { return imageStreamVector(new ByteVector()); }
  public ByteVector imageStreamVector(ByteVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer imageStreamAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer imageStreamInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createImageMessage(FlatBufferBuilder builder,
      int imageNameOffset,
      long imageSize,
      long imageWidth,
      long imageHeight,
      int imageStreamOffset) {
    builder.startTable(5);
    ImageMessage.addImageStream(builder, imageStreamOffset);
    ImageMessage.addImageHeight(builder, imageHeight);
    ImageMessage.addImageWidth(builder, imageWidth);
    ImageMessage.addImageSize(builder, imageSize);
    ImageMessage.addImageName(builder, imageNameOffset);
    return ImageMessage.endImageMessage(builder);
  }

  public static void startImageMessage(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addImageName(FlatBufferBuilder builder, int imageNameOffset) { builder.addOffset(0, imageNameOffset, 0); }
  public static void addImageSize(FlatBufferBuilder builder, long imageSize) { builder.addInt(1, (int) imageSize, (int) 0L); }
  public static void addImageWidth(FlatBufferBuilder builder, long imageWidth) { builder.addInt(2, (int) imageWidth, (int) 0L); }
  public static void addImageHeight(FlatBufferBuilder builder, long imageHeight) { builder.addInt(3, (int) imageHeight, (int) 0L); }
  public static void addImageStream(FlatBufferBuilder builder, int imageStreamOffset) { builder.addOffset(4, imageStreamOffset, 0); }
  public static int createImageStreamVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createImageStreamVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startImageStreamVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endImageMessage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ImageMessage get(int j) { return get(new ImageMessage(), j); }
    public ImageMessage get(ImageMessage obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

