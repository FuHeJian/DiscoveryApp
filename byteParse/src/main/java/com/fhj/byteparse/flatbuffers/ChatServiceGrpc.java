//Generated by flatc compiler (version 25.2.10)
//If you make any local changes, they will be lost
//source: message.fbs

package com.fhj.byteparse.flatbuffers;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: message.fbs")
public final class ChatServiceGrpc {

  private ChatServiceGrpc() {}
  
  public static final String SERVICE_NAME = "com.fhj.byteparse.flatbuffers.ChatService";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getChatMethod()} instead. 
  public static final io.grpc.MethodDescriptor<com.fhj.byteparse.flatbuffers.Message,
      com.fhj.byteparse.flatbuffers.Message> METHOD_CHAT = getChatMethod();
  
  private static volatile io.grpc.MethodDescriptor<com.fhj.byteparse.flatbuffers.Message,
      com.fhj.byteparse.flatbuffers.Message> getChatMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<com.fhj.byteparse.flatbuffers.Message> extractorOfMessage;
  private static FlatbuffersUtils.FBExtactor<com.fhj.byteparse.flatbuffers.Message> getExtractorOfMessage() {
      if (extractorOfMessage != null) return extractorOfMessage;
      synchronized (ChatServiceGrpc.class) {
          if (extractorOfMessage != null) return extractorOfMessage;
          extractorOfMessage = new FlatbuffersUtils.FBExtactor<com.fhj.byteparse.flatbuffers.Message>() {
              public com.fhj.byteparse.flatbuffers.Message extract (ByteBuffer buffer) {
                  return com.fhj.byteparse.flatbuffers.Message.getRootAsMessage(buffer);
              }
          };
          return extractorOfMessage;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<com.fhj.byteparse.flatbuffers.Message,
      com.fhj.byteparse.flatbuffers.Message> getChatMethod() {
    io.grpc.MethodDescriptor<com.fhj.byteparse.flatbuffers.Message, com.fhj.byteparse.flatbuffers.Message> getChatMethod;
    if ((getChatMethod = ChatServiceGrpc.getChatMethod) == null) {
      synchronized (ChatServiceGrpc.class) {
        if ((getChatMethod = ChatServiceGrpc.getChatMethod) == null) {
          ChatServiceGrpc.getChatMethod = getChatMethod = 
              io.grpc.MethodDescriptor.<com.fhj.byteparse.flatbuffers.Message, com.fhj.byteparse.flatbuffers.Message>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "com.fhj.byteparse.flatbuffers.ChatService", "chat"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  com.fhj.byteparse.flatbuffers.Message.class, getExtractorOfMessage()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  com.fhj.byteparse.flatbuffers.Message.class, getExtractorOfMessage()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getChatMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static ChatServiceStub newStub(io.grpc.Channel channel) {
    return new ChatServiceStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static ChatServiceBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new ChatServiceBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static ChatServiceFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new ChatServiceFutureStub(channel);
  }
  
  /**
   */
  public static abstract class ChatServiceImplBase implements io.grpc.BindableService {
    
    /**
     */
    public     void chat(com.fhj.byteparse.flatbuffers.Message request,
        io.grpc.stub.StreamObserver<com.fhj.byteparse.flatbuffers.Message> responseObserver)     {
      asyncUnimplementedUnaryCall(getChatMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getChatMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                com.fhj.byteparse.flatbuffers.Message,
                com.fhj.byteparse.flatbuffers.Message>(
                  this, METHODID_CHAT)))
          .build();
    }
  }
  
  /**
   */
  public static final class ChatServiceStub extends io.grpc.stub.AbstractStub<ChatServiceStub> {
    private ChatServiceStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private ChatServiceStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected ChatServiceStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new ChatServiceStub(channel, callOptions);
    }
    
    /**
     */
    public     void chat(com.fhj.byteparse.flatbuffers.Message request,
        io.grpc.stub.StreamObserver<com.fhj.byteparse.flatbuffers.Message> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getChatMethod(), getCallOptions()), request, responseObserver);
    }
  }
  
  /**
   */
  public static final class ChatServiceBlockingStub extends io.grpc.stub.AbstractStub<ChatServiceBlockingStub> {
    private ChatServiceBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private ChatServiceBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected ChatServiceBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new ChatServiceBlockingStub(channel, callOptions);
    }
    
    /**
     */
    public     com.fhj.byteparse.flatbuffers.Message chat(com.fhj.byteparse.flatbuffers.Message request)     {
      return blockingUnaryCall(
          getChannel(), getChatMethod(), getCallOptions(), request);
    }
  }
  
  /**
   */
  public static final class ChatServiceFutureStub extends io.grpc.stub.AbstractStub<ChatServiceFutureStub> {
    private ChatServiceFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private ChatServiceFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected ChatServiceFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new ChatServiceFutureStub(channel, callOptions);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<com.fhj.byteparse.flatbuffers.Message> chat(
        com.fhj.byteparse.flatbuffers.Message request)     {
      return futureUnaryCall(
          getChannel().newCall(getChatMethod(), getCallOptions()), request);
    }
  }
  
  private static final int METHODID_CHAT = 0;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final ChatServiceImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(ChatServiceImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_CHAT:
          serviceImpl.chat((com.fhj.byteparse.flatbuffers.Message) request,
              (io.grpc.stub.StreamObserver<com.fhj.byteparse.flatbuffers.Message>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (ChatServiceGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getChatMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
